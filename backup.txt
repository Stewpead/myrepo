var net = require('net');
var client = new net.Socket();

const electron = require('electron');
const app = electron.app;
const BrowserWindow = electron.BrowserWindow;
const url = require('url');
const path = require('path');
// const {app, BrowserWindow} = electron;
// const {app} = require('electron');
// const app = electron.app;
// const {ipc} = require('electron');
const {ipcMain} = require('electron');


var filename;

filename = ipcMain.addListener.toString;
var temp;
let defaultWindow; 
let notDefaultWindow;
let prevWindow;
var IMG_DIR = './images/';
var app_dir = './winPage/';

// var filename;
function hidewindow() {
    BrowserWindow({
        show:false
    });
}

function showWindow() {

defaultWindow = new BrowserWindow({
    frame: false,
    width: 1050,
    height: 750,
    minWidth: 850,
    minHeight: 600,
    icon: path.join(__dirname, IMG_DIR, 'whiteicon.png'),
    show: false,
});
defaultWindow.openDevTools();
    defaultWindow.loadURL(url.format({
        pathname: path.join(__dirname, app_dir,'loginWindow.html'),
        protocol: 'file:',
        slashes: true
    }));

defaultWindow.once('ready-to-show', () => {
    defaultWindow.show();
});
}

let mainWindow;
function mWindow() {
    // defaultWindow = hidden;a

    mainWindow = new BrowserWindow({
        frame: false,
        width: 1050,
        height: 750,
        minWidth: 850,
        minHeight: 600,
        icon: path.join(__dirname, IMG_DIR, 'whiteicon.png'),
        show: false,
    });

    mainWindow.openDevTools();
    mainWindow.loadURL(url.format({
        pathname: path.join(__dirname, app_dir,'mainWindow.html'),
        protocol: 'file:',
        slashes: true
    }));

    mainWindow.once('ready-to-show', () => {
        // defaultWindow.hidden = true;
        // mainWindow.location.href = 'mainWindow.html';
        mainWindow.show();
    });
    
    // mainWindow.on('close', () => {
    //     app.quit();
    // });
}

function anotherWindow(filename) {

    notDefaultWindow = null;

    notDefaultWindow = new BrowserWindow({
    frame: false,
    maxHeight:612,
    maxWidth: 632,
    width: 631,
    height: 611,
    minWidth: 630,
    minHeight: 610,
    icon: path.join(__dirname, IMG_DIR, 'whiteicon.png'),
    parent: defaultWindow,
    modal: true
    });

// notDefaultWindow.openDevTools();
notDefaultWindow.loadURL(url.format({
    pathname: path.join(__dirname, app_dir, filename),
    protocol: 'file:',
    slashes: true
}));
notDefaultWindow.once('ready-to-show', () => {
    notDefaultWindow.show();
    // defaultWindow.hide();
})

}

let popupWindows;

function popupWindow(filename) {
    popupWindows = new BrowserWindow({
        frame: false,
        maxHeight:312,
        maxWidth: 352,
        width: 351,
        height: 311,
        minWidth: 310,
        minHeight: 350,
        icon: path.join(__dirname, IMG_DIR, 'whiteicon.png'),
        parent: anotherWindow,
        modal: true
        });

}



ipcMain.on('modal', (event, arg) => { 
    anotherWindow(arg);
  });

app.on('quit', () => {
    console.log("closed");
});

app.on('ready',showWindow);

app.on('window-all-closed', () => {
    if(process.platform !== 'darwin'){
        app.quit();
    }
});

app.on('activate', () => {
    if(mainWindow == null) {
        showWindow();
    }
});


if(process.platform == 'darwin'){
    mainMenuTemplate.unshift({});
}

// add developer tools item if not in production

if(process.env.NODE_ENV == 'production')
{
    mainMenuTemplate.push({
        label: 'Developer Tools',
        submenu: [
            {
                label: 'Toggle Devtools',
                accelerator: process.platform == 'darwin' ? 'Command+I':
                'Ctrl+I',
                click(item,focusedWindow)
                {
                    focusedWindow.toggleDevTools();
                }
            },
            {
                role: 'reload'
            }
        ]
    });
}



var avxtokens;
var logindatas;
ipcMain.on('test', () => {
    receiveee();
}
);
// ipcMain.on('logindata',


client.connect(5150, '192.168.254.115', function() {
    console.log('Connected');
});

ipcMain.on('logindata',(event, arg) => {
    logindatas = arg;
    dataconnect(logindatas);
  });

//   ipcMain.on('signupdata',(event, arg) => {
//     logindatas = arg;
//     dataconnect(logindatas);
//   });

ipcMain.on('sendAVX',(event, arg) => {
    avxtokens = arg;
    dataconnect(avxtokens);
});

function dataconnect(logindatas) {
   // var msg = JSON.stringify(logindatas);
    //console.log(msg);

    client.write(logindatas);
}
client.on('close', function() {
	console.log('Connection closed');
});
// client.on('error', function(err) {
// 	console.log('Connection error ' + err);
// });    


// var obj = {}
//  data1;

client.on('data', function(data) {
    // console.log(data);
    var data1 = JSON.parse(data);
    // console.log(data1);

    if(data1["status"]==1) {
        console.log("Status is 1");
    }
    else if(data1["status"]==2) {

        console.log("Status is 2");
        defaultWindow.loadURL(url.format({
            pathname: path.join(__dirname, app_dir,'mainWindow.html'),
            protocol: 'file:',
            slashes: true
        }));
    }
    else if(data1["status"]==3) {
        // console.log("Status is 3"); wallet balance
        console.log(data1["balance"]);

        ipcMain.on('wballance', (event, arg) => { 
           // Send value synchronously back to renderer process
           event.returnValue = data1["balance"];
           // Send async message to renderer process
           //mainWindow.webContents.send('ping', 5);

        });
    }
    if(data1["status"]==777) {
        console.log("historyjson")
        console.log(data1);
    }
});

// console.log('Received: ' + data);

// FUNCTION FOR TESTING
function autoRefresh() {
	
	/* GET ACCOUNT BALANCE */
	let jsonBalance = { status : 1121 };
	let jsonStringBalance = JSON.stringify(jsonBalance);
	ipcRenderer.send('avx-account-balance', jsonStringBalance);
	
	/* GET HISTORY */
	let jsonHistory = { status : 1123 };
	let jsonStringHistory = JSON.stringify(jsonHistory);
	ipcRenderer.send('avx-account-history', jsonStringHistory);
	
	/* GET ACCOUNT SPENT */
	let jsonSpent = { status : 1124 };
	let jsonStringSpent = JSON.stringify(jsonSpent);
	ipcRenderer.send('avx-account-spent', jsonStringSpent);
	

	setTimeout(function() {

	
		// POPULATE DATA ON SCREEN

		
		let dataSpent = store.get('avx-account-spent');
		store.delete('avx-account-spent');
		if(typeof dataSpent["spent"] != 'undefined') {
			$('#spentavx').html(parseFloat(dataSpent["spent"]).toFixed(2));
		}
		
		
	}, 1000);

	
	setTimeout(function() {

	
		// POPULATE DATA ON SCREEN

		let dataHistory = store.get('avx-account-history');
		store.delete('avx-account-history');
			

		if(typeof dataHistory["history"] != 'undefined') {
			let outputHistory = JSON.parse(dataHistory["history"]);
			let outputIncoming;
			let outputOutgoing;
			
			if(typeof outputHistory["incoming"] != 'undefined') {

				for (var key in outputHistory["incoming"]) {
					let currObj = outputHistory["incoming"][key];
					outputIncoming += '<tr>';
					outputIncoming += '<td>'+currObj["type"]+'</td>';
					outputIncoming += '<td>-Date-</td>';
					outputIncoming += '<td>-Time-</td>';
					outputIncoming += '<td>'+currObj["sender"]+'</td>';
					outputIncoming += '<td>'+currObj["receiver"]+'</td>';
					outputIncoming += '<td>-Desc-</td>';
					outputIncoming += '<td>'+currObj["amount"]+'</td>';
					outputIncoming += '<td>-Trans ID-</td>';
					outputIncoming += '</tr>';
				}
				
				$("#incoming tbody").html(outputIncoming);
			}
			
			if(typeof outputHistory["outgoing"] != 'undefined') {
				
				for (var key in outputHistory["outgoing"]) {
					let currObj = outputHistory["outgoing"][key];
					outputOutgoing += '<tr>';
					outputOutgoing += '<td>'+currObj["type"]+'</td>';
					outputOutgoing += '<td>-Date-</td>';
					outputOutgoing += '<td>-Time-</td>';
					outputOutgoing += '<td>'+currObj["sender"]+'</td>';
					outputOutgoing += '<td>'+currObj["receiver"]+'</td>';
					outputOutgoing += '<td>-Desc-</td>';
					outputOutgoing += '<td>'+currObj["amount"]+'</td>';
					outputOutgoing += '<td>-Trans ID-</td>';
					outputOutgoing += '</tr>';
				}
				
				$("#outgoing tbody").html(outputOutgoing);
				
			}
			
			$("#tbMerge tbody").html(outputIncoming+outputOutgoing);
		}
		//let accountHistoryIncoming = data["incoming"];

		

		
	}, 1000);
	
}